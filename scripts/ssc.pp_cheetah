#!/usr/bin/env python

"""
postprocess a cheetah run
"""

import os
from glob import glob
import argparse

import numpy as np
from ssc import evt


def parse_args():

    parser = argparse.ArgumentParser()

    parser.add_argument(
        '-r', '--runs',
        type=int,
        help='runs to process',
        nargs='+',
        required=True)

    parser.add_argument(
        '--energy-cutoff',
        type=float,
        help='in eV',
        default=12700.0)

    parser.add_argument(
        '--peak-cutoff',
        type=int,
        help='number of peaks',
        default=40)

    return parser.parse_args()



def retrieve_metadata(run):

    path = '/reg/d/psdm/cxi/cxic0415/scratch/tjlane/cheetah/hdf5/r%04d-se/frames.txt' % run
    data = np.genfromtxt(path, delimiter=',')

    filenames       = np.genfromtxt(path, delimiter=',', usecols=[0], dtype=None)
    times           = data[:,4]
    fiducials       = data[:,5]
    photon_energies = data[:,7]
    n_peaks         = data[:,13]

    return filenames, times, fiducials, photon_energies, n_peaks




def main():

    args = parse_args()


    for run in args.runs:

        path = '/reg/d/psdm/cxi/cxic0415/scratch/tjlane/cheetah/hdf5/r%04d-se' % run
        if not os.path.exists(path):
            print 'No X-se data for run %d' % run
            continue


        md = retrieve_metadata(run)
        filenames, times, fiducials, photon_energies, n_peaks = md


        # filter the data by some basic criteria

        keepers  = (photon_energies > args.energy_cutoff)
        keepers *= (n_peaks > args.peak_cutoff)

        filename_prefix = '/reg/d/psdm/cxi/cxic0415/scratch/tjlane/cheetah/hdf5/r%04d-se/' % run 

        list_filename = '/reg/d/psdm/cxi/cxic0415/scratch/tjlane/crystfel/lists/run%04d.lst' % run



        f = open(list_filename, 'w')
        for fn in filenames[keepers]:
            file_path = glob(filename_prefix + 'data*/' + fn + '.h5')[0]
            f.write( file_path + '\n' )
        f.close()

        print '%d of %d hits --> %s' % (np.sum(keepers),
                                        len(keepers),
                                        list_filename)


    # possible....

    # now loop through those events and **hitfind** on low-q    
    # if event is a hit, it gets saved in an HDF5 for crystFEL

    #for event in events:
    #    if is_hit(event):
    #        pass # save


    return


if __name__ == '__main__':
    main()
 




